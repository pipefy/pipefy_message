#!/usr/bin/env ruby
# frozen_string_literal: true

require "rubygems"
require "singleton"
require "thor"
require "pipefy_message"

module PipefyMessage
  # CLI
  class CLI < Thor
    default_task :start

    desc "start", "Starts PipefyMessage consumer"
    method_option :worker, aliases: "-w", type: :string, desc: "Worker to load"
    method_option :rails, aliases: "-R", type: :boolean, desc: "Load Rails", default: false
    method_option :pidfile, aliases: "-P", type: :string, desc: "Path to pidfile"
    def start
      PipefyMessage::Runner.instance.write_pid(options) if options[:pidfile]
      PipefyMessage::Runner.instance.initialize_rails if options[:rails]
      PipefyMessage::Runner.instance.run(options[:worker]) if options[:worker]
    end
  end

  # Runner
  class Runner
    include Singleton
    include PipefyMessage::Logging

    def initialize_rails
      # Adapted from: https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/cli.rb

      require "rails"
      if ::Rails::VERSION::MAJOR < 4
        require File.expand_path("config/environment.rb")
        ::Rails.application.eager_load!
      else
        require File.expand_path("config/application.rb")
        require File.expand_path("config/environment.rb")
      end

      # Override rails logger by gem logger
      ::Rails.logger = logger
    end

    def write_pid(options)
      return unless (path = options[:pidfile])

      File.open(path, "w") { |f| f.puts(Process.pid) }
    end

    def run(worker)
      worker.constantize.process_message
    end
  end
end

PipefyMessage::CLI.start(ARGV)
